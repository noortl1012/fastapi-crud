pipeline {
    agent any

    environment {
        VENV_DIR = 'venv' // Virtual environment directory
        DOCKER_IMAGE = 'noortl/my-fastapi-app:latest' // Docker image name with tag
        DOCKER_HUB_CREDENTIALS_ID = 'noor-docker' // Jenkins credentials ID for Docker Hub
        TRIVY_PATH = 'C:/Users/nourt/Downloads/trivy_0.54.1_windows-64bit/trivy.exe'
    }

    stages {
        stage('Verify JAVA_HOME') {
            steps {
                bat 'echo %JAVA_HOME%'
                bat 'dir %JAVA_HOME%\\bin'
            }
        }

        stage('Install Poetry') {
            steps {
                bat 'pip install poetry'
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'poetry install'
            }
        }

        stage('Setup Test Environment') {
            steps {
                bat 'poetry shell'
                bat 'poetry run pip install pytest pytest-mock'
            }
        }

        stage('Run Unit Tests') {
            steps {
                bat 'poetry run pytest --junit-xml=report.xml'
            }
            post {
                always {
                    junit 'report.xml'
                }
            }
        }

        stage('Build Application') {
            steps {
                bat 'poetry build'
            }
        }

        stage('Code Analysis') {
            steps {
                dir("${WORKSPACE}") {
                    script {
                        def scannerHome = tool name: 'sq1', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        withSonarQubeEnv('sq1') {
                            bat "\"${scannerHome}\\bin\\sonar-scanner.bat\" -Dsonar.projectKey=fast-api-sonar -Dsonar.projectName=fast-api-sonar"
                        }
                    }
                }
            }
        }

        stage('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: ''' 
                    -o './'
                    -s './'
                    -f 'ALL' 
                    --prettyPrint''', odcInstallation: 'DP-check'
        
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE} ."
                    echo "Docker Version:"
                    bat 'docker --version'
                    bat 'docker info'
                }
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                script {
                    bat "${TRIVY_PATH} image ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        bat 'docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%'
                    }

                    // Push Docker Image
                    bat "docker push ${DOCKER_IMAGE}"
                }
            }
        }
    }

    post {
        always {
            // Logout from Docker Hub
            bat 'docker logout'
        }
    }
}
